Handling File Uploads into your Database with JDBC:

1) Write an upload form
	<form method=POST action="..." enctype="multipart/form-data">
		<input type="file" name="part-name"/>
			This is what shows the file chooser
2) Edit web.xml to enable multipart form handling for your
	front controller:
		<servlet>
			...
			<multipart-config>
				<max-file-size></max-file-size>
			</multipart-config>
3) Process the form submission in your front controller:
	handlerMethod(HttpServletRequest request) {
		Part part = request.getPart("part-name");
		String uploadedFileName = part.getFileName();
		String uploadedMimeType = part.getContentType();
		InputStream data = part.getInputStream();
4) Add a BLOB column to your domain table and a byte array to
	your domain class, along with getters and setters
	
5) Use setBytes() in your prepared statement for insert/update
	and getBytes() in your select
6) A utility method for converting an input stream into a byte
	array for your insert/update statements:
	
    private byte[] imageFromStream(InputStream is) {
        try (ByteArrayOutputStream os = new ByteArrayOutputStream()) {
            byte[] buffer = new byte[0xFFFF];
            for (int len; (len = is.read(buffer)) != -1;)
                os.write(buffer, 0, len);
            os.flush();
            return os.toByteArray();
        } catch (IOException ioe) {
            throw new RuntimeException(ioe);
        }          
    }

7) Write a servlet to send the BLOB bytes in a response!!


JDBC CORE
	DriverManager
		getConnection(jdbcUrl, username, password)
	Connection
		createStatement(), createPreparedStatement(sql)
		// optional argument to request generated keys
	Statement
		executeQuery(sql), executeUpdate(sql)
	PreparedStatement
		setJavaType(question-mark-position, compatible value)
		executeQuery(), executeUpdate()
	ResultSet
		next(), getJavaDataType(column-index or column-name)
	

CHANGES MADE BETWEEN DAY6 AND DAY7 HUBBUB:

1) I changed the User and Profile domains and tables so that
	user objects have a reference to their profile, not
	the other way around. This makes everything involving
	profiles easier - this required changes to bootstrap-derby.sql,
	User.java, Post.java, HubbubDao.java, FrontController.java,
	timeline.jsp, post.jsp, profile.jsp, login.jsp, join.jsp,
	and upload.jsp!
2) I reworked all of the HubbubDao methods to just happily throw
	their SQLExceptions and the FrontController catches them -
	now the error messages are rendering in the flash attributes.
3) I was accidentally using rs.getDate() instead of rs.getTimestamp()
	in the result sets of the post retrieval methods of HubbubDao -
	that's why posts always showed 12:00:00 AM - now that I'm using
	timestamps, they're rendering correctly in timeline.jsp and post.jsp
4) I added an unfollow capability. When you're viewing someone else's
	wall, there's a Follow link you click on to follow them and now that
	link changes to Unfollow if you're already following them.
5) Features to come: integrate the posts of people you're following into
	your wall, identify hash tags in posts and create walls based on
	those tags, add search capability for tags and for text in users'
	posts and biographies.

OH! And not to be forgotten, I followed Saranya's suggestion and
stored follower/followee relations as List<String> instead
of List<User> in Profile.java - this is more memory efficient and,
conveniently, avoids a stack overflow that would be caused by
loading a user by loading their profile which references followers
and followees as users that must be loaded, along with their profiles,
which list users which need profiles which list users....
Good call, Saranya!
